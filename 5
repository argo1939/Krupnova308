

<!DOCTYPE html>
<html>
<head>
    <title>Лабораторная 5</title>
</head>
<body>

<h2>1. СЧИТАЛКА </h2>
<input type="number" id="num1" placeholder="Число 1">
<input type="number" id="num2" placeholder="Число 2">
<select id="operation">
    <option value="add">+</option>
    <option value="subtract">-</option>
    <option value="multiply">*</option>
    <option value="divide">/</option>
</select>
<button id="calculate">Вычислить</button>
<p id="calculatorResult"></p>
<script>
    // Переменные для ввода чисел, выбора операции и отображения результата
    const num1Input = document.getElementById('num1');
    const num2Input = document.getElementById('num2');
    const operationSelect = document.getElementById('operation');
    const calculateButton = document.getElementById('calculate');
    const calculatorResult = document.getElementById('calculatorResult');

    // Обработчик кнопки "Вычислить"
    calculateButton.addEventListener('click', () => {
        const num1 = parseFloat(num1Input.value); // Получаем первое число
        const num2 = parseFloat(num2Input.value); // Получаем второе число
        const operation = operationSelect.value; // Выбранная операция

        // Проверка на ввод чисел
        if (isNaN(num1) || isNaN(num2)) {
            calculatorResult.textContent = "Ошибка: Введите числа";
            return;
        }

        // Калькулятор с методами для операций
        const calculator = {
            add: (a, b) => a + b,
            subtract: (a, b) => a - b,
            multiply: (a, b) => a * b,
            divide: (a, b) => b === 0 ? "ОШИБКО ОШИБКО: деление на ноль" : a / b,
        };

        // Вычисление результата в зависимости от операции
        const result = calculator[operation](num1, num2);
        calculatorResult.textContent = `Результат: ${result}`;
    });
</script>

<h2>2. ПРОВЕРКО: УСЛОВИЕ </h2>
<button id="checkTest">Проверить условие</button>
<p id="testResult"></p>
<script>
    // Переменные для проверки условия
    const checkTestButton = document.getElementById('checkTest');
    const testResultParagraph = document.getElementById('testResult');

    // Обработчик кнопки "Проверить условие"
    checkTestButton.addEventListener('click', () => {
        const num = prompt('Введите число:'); // Запрашиваем у пользователя число
        const conditionChecker = num => num > 10 ? "Число БОЛЬШЕ 10" : "Число НЕ БОЛЬШЕ 10";
        testResultParagraph.textContent = conditionChecker(parseInt(num, 10)); // Отображаем результат проверки
    });
</script>

<h2>3. ПРОВЕРКО: ПОЛИНДРОМ</h2>
<input type="text" id="surnameInput" placeholder="Введите фамилию">
<button id="checkPalindrome">Проверить</button>
<p id="palindromeResult"></p>
<script>
    // Переменные для проверки палиндрома
    const surnameInput = document.getElementById('surnameInput');
    const checkPalindromeButton = document.getElementById('checkPalindrome');
    const palindromeResultParagraph = document.getElementById('palindromeResult');

    // Обработчик кнопки "Проверить"
    checkPalindromeButton.addEventListener('click', () => {
        const surname = surnameInput.value.toLowerCase().trim(); // Приводим к нижнему регистру и удаляем лишние пробелы
        const isPalindrome = str => str === str.split("").reverse().join(""); // Функция проверки палиндрома
        palindromeResultParagraph.textContent = isPalindrome(surname) ? "Палиндром" : "Не палиндром не круто"; // Результат
    });
</script>

<h2>4. СРЕДНЕЕ </h2>
<input type="text" id="numbersInput" placeholder="Введите числа через ЗАПЯТУЮ">
<button id="calculateAverage">Рассчитать</button>
<p id="averageResult"></p>
<script>
    // Переменные для вычисления среднего
    const numbersInput = document.getElementById('numbersInput');
    const calculateAverageButton = document.getElementById('calculateAverage');
    const averageResultParagraph = document.getElementById('averageResult');

    // Обработчик кнопки "Рассчитать"
    calculateAverageButton.addEventListener('click', () => {
        const numbers = numbersInput.value.split(',').map(Number).filter(num => !isNaN(num)); // Получаем массив чисел
        const calculateAvg = arr => arr.length === 0 ? "ОШИБКО: введите числа" : arr.reduce((sum, num) => sum + num, 0) / arr.length; // Среднее
        averageResultParagraph.textContent = `Среднее: ${calculateAvg(numbers)}`; // Отображение результата
    });
</script>

<h2>5. ЖДЕМ НОВЫЙ ГОД </h2>
<button id="daysToNewYear">Дней до нового года</button>
<p id="newYearResult"></p>
<script>
    // Переменные для вычисления дней до Нового года
    const daysToNewYearButton = document.getElementById('daysToNewYear');
    const newYearResultParagraph = document.getElementById('newYearResult');

    // Обработчик кнопки "Дней до нового года"
    daysToNewYearButton.addEventListener('click', () => {
        const daysToNewYear = () => {
            const today = new Date(); // Сегодняшняя дата
            const newYear = new Date(today.getFullYear() + 1, 0, 1); // 1 января следующего года
            return Math.ceil((newYear - today) / (1000 * 60 * 60 * 24)); // Разница в днях
        };
        newYearResultParagraph.textContent = `Дней до нового года: ${daysToNewYear()}`; // Результат
    });
</script>

<h2>6. ПУСТАЯ СТРЕЛКО-ФУНКЦИЯ </h2>
<p id="emptyFunctionResult"></p>
<script>
    // Определение пустой стрелочной функции, которая ничего не возвращает
    const emptyFunction = () => undefined; // Явное указание, что функция возвращает undefined

    // Получаем элемент, где будем отображать результат
    const emptyFunctionResult = document.getElementById('emptyFunctionResult');

    // Отображение результата работы пустой функции
    emptyFunctionResult.textContent = `Результат: ${emptyFunction()}`; // Здесь будет "Результат: undefined"
    
    // Вывод результата работы пустой функции в консоль
    console.log(emptyFunction()); // Будет выведено undefined
</script>

<h2>7. МАССИВ </h2>
<p id="arrayResult"></p>
<script>
    // Определяем исходный массив
    const myArray = [1, 2, 3, 4, 5, 6];

    // Функция для подсчета суммы элементов массива
    const sumArray = arr => arr.reduce((sum, val) => sum + val, 0);

    // Функция для получения чётных элементов массива
    const getEven = arr => arr.filter(val => val % 2 === 0);

    // Функция для удвоения каждого элемента массива
    const doubleArray = arr => arr.map(val => val * 2);

    // Получаем элемент для отображения результата
    const arrayResult = document.getElementById("arrayResult");

    // Формируем строку с результатами и выводим её
    arrayResult.textContent = `
        Сумма: ${sumArray(myArray)}, 
        Чётные: ${getEven(myArray)}, 
        Удвоенные: ${doubleArray(myArray)}
    `;
</script>

<h2>8. ЕМАИЛ </h2>
<input type="text" id="emailFilter" placeholder="Введите часть ЕМАИЛА">
<ul id="emailList"></ul>
<script>
    // Получаем элемент ввода текста и список для отображения email
    const emailFilterInput = document.getElementById('emailFilter');
    const emailList = document.getElementById('emailList');

    // Исходный массив email
    const emails = ["test@gmail.com", "lab2@mail.ru", "postavte5@bk.ru", "please@outlook.com"];

    // Обработчик события ввода текста
    emailFilterInput.addEventListener('input', () => {
        const filterText = emailFilterInput.value.toLowerCase(); // Преобразуем ввод в нижний регистр
        emailList.innerHTML = ''; // Очищаем список email

        // Фильтруем email и создаём элементы списка
        emails.filter(email => email.toLowerCase().includes(filterText)).forEach(email => {
            const li = document.createElement('li'); // Создаем новый элемент списка
            li.textContent = email; // Задаем текст элемента
            emailList.appendChild(li); // Добавляем элемент в список
        });
    });
</script>

<script>
    // Функция для генерации случайного числа от 0 до max - 1
    function getRandomInt(max) {
        return Math.floor(Math.random() * max);
    }

    // Исходный массив
    let arr = [];

    // Функция для заполнения массива случайными числами
    const spawn = n => {
        for (let i = 0; i < n; i++) {
            arr[i] = getRandomInt(3); // Заполняем числами 0, 1 или 2
        }
        return arr;
    };

    // Функция для проверки наибольшей последовательности шариков одного цвета
    const check = arr => {
        let redMax = 0, currentRedMax = 0;
        let blackMax = 0, currentBlackMax = 0;
        let whiteMax = 0, currentWhiteMax = 0;

        for (let i = 0; i < arr.length; i++) {
            // Проверка красных шариков
            if (arr[i] === 0) {
                redMax++;
            } else {
                currentRedMax = Math.max(currentRedMax, redMax);
                redMax = 0;
            }

            // Проверка черных шариков
            if (arr[i] === 1) {
                blackMax++;
            } else {
                currentBlackMax = Math.max(currentBlackMax, blackMax);
                blackMax = 0;
            }

            // Проверка белых шариков
            if (arr[i] === 2) {
                whiteMax++;
            } else {
                currentWhiteMax = Math.max(currentWhiteMax, whiteMax);
                whiteMax = 0;
            }
        }

        // Учитываем последние последовательности
        currentRedMax = Math.max(currentRedMax, redMax);
        currentBlackMax = Math.max(currentBlackMax, blackMax);
        currentWhiteMax = Math.max(currentWhiteMax, whiteMax);

        // Вывод результата
        if (currentRedMax > currentBlackMax && currentRedMax > currentWhiteMax) {
            alert(`Наибольшая последовательность состоит из красных шариков: ${currentRedMax}`);
        } else if (currentWhiteMax > currentBlackMax) {
            alert(`Наибольшая последовательность состоит из белых шариков: ${currentWhiteMax}`);
        } else {
            alert(`Наибольшая последовательность состоит из черных шариков: ${currentBlackMax}`);
        }
    };

    // Генерация массива и проверка последовательностей
    spawn(100000); // Создаём массив из 100 000 элементов
    check(arr); // Проверяем последовательности
</script>


</body>
</html>
```

